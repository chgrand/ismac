#!/usr/bin/env python

import rospy
#from sensor_msgs.msg import NavSatFix
from geometry_msgs.msg import PoseStamped
import os, sys
import json
from PySide import QtGui
from map_viewer import MapViewer


#------------------------------------------------------------------------------
class Agent:
    def __init__(self, name, color):
        self.name = name
        self.x = 0
        self.y = 0
        self.color = color    
        rospy.Subscriber("/"+name+"/pose", PoseStamped, self.callback)

    def set_gui(self, gui):
        self.gui = gui
            
    def callback(self, data):
        self.x = data.pose.position.x
        self.y = data.pose.position.y
        try:
            self.gui.update()    
        except:
            None
    
    def get_pos(self):
        return (self.x, self.y)

    def get_name(self):
        return self.name

    def getColor(self):
        return self.color


#------------------------------------------------------------------------------
class MainWin(QtGui.QWidget):

    def __init__(self, map_viewer_):
        super(MainWin, self).__init__()

        button_start = QtGui.QPushButton("Start mission")
        button_logpose = QtGui.QPushButton("Log pose")
        button_start.setWidth=180
        button_logpose.setMaximumWidth=180
        
        
        vbox = QtGui.QVBoxLayout()
        vbox.addWidget(button_start)
        vbox.addWidget(button_logpose)
        vbox.addStretch(1)
        

        hbox = QtGui.QHBoxLayout()
        hbox.addWidget(map_viewer_)
        hbox.addLayout(vbox)

    
        self.setLayout(hbox)
        self.setGeometry(200, 200, 500, 400) #int(y_size*500/x_size))
        self.setWindowTitle('ISMAC')
        self.show()

        

#------------------------------------------------------------------------------
def main():

    if len(sys.argv) < 2:
        print("usage: {0} mission_filename.json".format(sys.argv[0]))
        sys.exit()

    print("Read mission file"+sys.argv[0])
    mission = json.load(open(sys.argv[1]))

    # Get hom_dir and check env variable to build path
    home_dir = ''
    for s in mission["home_dir"].split('/'):
        if s[0]=='$' :            
            home_dir += os.environ[s[1:]]+'/'
        else:
            home_dir += s+'/' 

    # Get map info
    print(home_dir)            
    print("Map  = "+mission["map_data"]["image_file"])
    map_size = mission["map_data"]["map_size"]    
    x_0 = float(map_size['x_min'])
    y_0 = float(map_size['y_max'])
    dx = float(map_size['x_max'])-float(map_size['x_min'])
    dy = float(map_size['y_max'])-float(map_size['y_min'])

    # Read image data
    image = QtGui.QImage(home_dir+mission["map_data"]["image_file"])
    if image.isNull():
        print("Error image not found")
        sys.exit()


        

        
    # Start application and widgets
    app = QtGui.QApplication(sys.argv)
    map_viewer = MapViewer(image, x_0, y_0, dx, dy)
    main_window = MainWin(map_viewer)

    
    # Start ros node
    rospy.init_node('ISMAC', anonymous=True)

    ## Analyse and add list of agents
    agents_list = mission['agents']
    for agent, props in agents_list.iteritems():        
        print('Add agent: '+agent+"\t"+props['color'])
        map_viewer.add_agent(Agent(agent, agents_list[agent]['color']))
        
    app.exec_()
    
if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass

