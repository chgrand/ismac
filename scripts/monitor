#!/usr/bin/env python

from __future__ import division

from Ui_MainWindow import Ui_MainWindow

import rospy
import rosbag
from std_msgs.msg import Empty,String
from geometry_msgs.msg import PoseStamped
from metal.srv import AleaAction
from metal.msg import StnVisu
import os, sys
import json

from PySide import QtGui
from PySide.QtCore import QTimer

from map_viewer import MapViewer
import time
import logging
import signal
import threading

## Global properties

logger = logging.getLogger("ismac")
ch = logging.StreamHandler()
logger.addHandler(ch)
cf = logging.Formatter('[%(asctime)s][%(levelname)s] (%(name)s): %(message)s')
ch.setFormatter(cf)
logger.setLevel(logging.INFO)
logger.info("ismac started")

bag_record = False
bag = None

#------------------------------------------------------------------------------
class Agent:
    def __init__(self, name, color):
        self.name = name
        self.x = 0
        self.y = 0
        self.color = color    
        rospy.Subscriber("/"+name+"/pose", PoseStamped, self.callback)

        self.lock = threading.RLock()

    def set_gui(self, gui):
        self.gui = gui

    def callback(self, data):
        global bag_record, bag
        
        if bag_record:
            with self.lock:
                try:
                    bag.write('/'+self.name+'/pose', data)
                except Exception as e:
                    import traceback
                    print(self.name)
                    print(data)
                    print(traceback.format_exc())
        self.x = data.pose.position.x
        self.y = data.pose.position.y
        #try:
        #    self.gui.update()
        #except:
        #    None
        
    
    def get_pos(self):
        return (self.x, self.y)

    def get_name(self):
        return self.name

    def getColor(self):
        return self.color

    def closeEvent(self, event):
        print("User has clicked the red x on the main window")
        rospy.signal_shutdown()
        event.accept()
#------------------------------------------------------------------------------
class MainWindow(QtGui.QMainWindow):

    def __init__(self, image, x_0, y_0, dx, dy, robots, targets):
        super(MainWindow, self).__init__()
        self.ui = Ui_MainWindow()
        self.hidden_start_pub = rospy.Publisher('/hidden/start', Empty, queue_size = 1)
        
        self.subscriber = rospy.Subscriber("/hidden/stnvisu", StnVisu, self.cb_ros_state, queue_size = 1 )
        
        self.vnet_add = rospy.Publisher('/vnet/add', String, queue_size = 1)
        self.vnet_del = rospy.Publisher('/vnet/del', String, queue_size = 1)
        self.ui.setupUi(self)
        
        def updateStatus(x,y):
            self.ui.statusBar.showMessage("Pos : (%s,%s)" % (x,y))
        self.ui.mapViewer.init(image, x_0, y_0, dx, dy, updateStatus)

        self.robots = robots
        self.trackRobots = set()
        self.trackConfRobots = set()
        self.resetTargetBoxes()

        for cbox in [self.ui.killedRobotBox, self.ui.warnedKilledRobotBox, self.ui.vnetRobotBox, self.ui.targetRobotBox, self.ui.debugRobotBox]:
            for r in sorted(robots.keys()):
                cbox.addItem(r)
                
        for agent,props in robots.items():
            print('Add robot: '+agent+"\t"+props['color'])
            self.ui.mapViewer.add_agent(Agent(agent, props['color']))
        for agent,props in targets.items():
            print('Add target: '+agent+"\t"+props['color'])
            self.ui.mapViewer.add_agent(Agent(agent, props['color']))
   
        self.ui.debugStateBox.addItem("running")
        self.ui.debugStateBox.addItem("error")
        self.ui.debugStateBox.addItem("tracking")
        self.ui.debugStateBox.addItem("repairingactive")

        self.ui.comCheckBox.stateChanged.connect(self.ui.mapViewer.set_draw_com)
        self.ui.trailCheckBox.stateChanged.connect(self.ui.mapViewer.set_draw_trail)
        self.ui.trajCheckBox.stateChanged.connect(self.ui.mapViewer.set_draw_trajectory)
        self.ui.transparencySlider.valueChanged.connect(self.ui.mapViewer.set_opacity)
        
        self.ui.vnetReloadButton.clicked.connect(self.cb_reload_vnet)
        self.ui.startButton.clicked.connect(self.cb_start_mission)
        self.ui.stopButton.clicked.connect(self.cb_stop_mission)
        self.ui.ubComButton.clicked.connect(self.cb_ub_com)
        self.ui.ubTargetButton.clicked.connect(self.cb_ub_target)
        self.ui.paramLoadButton.clicked.connect(self.cb_load_params)
        
        self.ui.killButton.clicked.connect(self.cb_kill_robot)
        
        self.ui.vnetIsolateButton.clicked.connect(self.cb_vnet_isolate)
        self.ui.vnetRangeButton.clicked.connect(self.cb_vnet_range)
        self.ui.vnetBlockButton.clicked.connect(self.cb_vnet_isolate_all)
        self.ui.vnetResetButton.clicked.connect(self.cb_vnet_reset)
        
        self.ui.targetSendButton.clicked.connect(self.cb_target_send)
        self.ui.targetEndButton.clicked.connect(self.cb_target_end)
        self.ui.targetTrackButton.clicked.connect(self.cb_target_track)
        self.ui.targetRepairButton.clicked.connect(self.cb_target_repair)
        
        self.ui.debugStateSend.clicked.connect(self.cb_debug_state)
        self.ui.debugSendUpdateButton.clicked.connect(self.cb_debug_stn_update)
        self.ui.debugRepairButton.clicked.connect(self.cb_debug_repair)
        self.ui.debugSendGeneralUpdateButton.clicked.connect(self.cb_debug_stn_update_general)
        
        def cb_vnet_stat(msg):
            data = json.loads(msg.data)
            
            f = data["from"]
            for to in data["forwarded"]:
                if to != f:
                    self.ui.mapViewer.add_com(f, to, color="green")
            for to in data["filtered"]:
                if to != f:
                    self.ui.mapViewer.add_com(f, to, color="red")
            self.ui.mapViewer.update()
        
        rospy.Subscriber("/vnet/statistics", String, cb_vnet_stat)
        
        self.show()

    def cb_reload_vnet(self):
        logger.info("Reloading config of vNet")
        self.ui.startButton.setEnabled(True)
        pub = rospy.Publisher("/vnet/reload", Empty, queue_size=1)
        pub.publish()
        
    def cb_start_mission(self):
        logger.info("Start mission")
        self.hidden_start_pub.publish(Empty())
        self.ui.vnetReloadButton.setEnabled(False)
        
    def cb_stop_mission(self):
        logger.info("Stop mission")
        for r in self.robots.keys():
            self.send_alea(r, 'state', """{"state":"done"}""")

    def cb_ub_com(self):
        value = self.ui.ubComField.text()
        try:
            v = float(value)
        except ValueError:
            v = None
        
        if v is not None and v > 0:
            logger.info("Setting the parameter /hidden/ubForCom to %s" % v)
            rospy.set_param("/hidden/ubForCom", v)
        else:
            logger.info("Deleting the parameter /hidden/ubForCom")
            if rospy.has_param("/hidden/ubForCom"):
                rospy.delete_param("/hidden/ubForCom")
        
    def cb_ub_target(self):
        value = self.ui.ubTargetField.text()
        try:
            v = float(value)
        except ValueError:
            v = None
        
        if v is not None and v > 0:
            logger.info("Setting the parameter /hidden/ubForTrack to %s" % v)
            rospy.set_param("/hidden/ubForTrack", v)
        else:
            logger.info("Deleting the parameter /hidden/ubForTrack")
            if rospy.has_param("/hidden/ubForTrack"):
                rospy.delete_param("/hidden/ubForTrack")

    def cb_load_params(self):
        if rospy.has_param("/hidden/ubForCom"):
            self.ui.ubComField.setText(str(rospy.get_param("/hidden/ubForCom")))
        else:
            self.ui.ubComField.setText("")
            
        if rospy.has_param("/hidden/ubForTrack"):
            self.ui.ubTargetField.setText(str(rospy.get_param("/hidden/ubForTrack")))
        else:
            self.ui.ubTargetField.setText("")

    """
    def cb_log_poses(self):
        global bag, bag_record, mission_name
        if self.sender().isChecked():
            self.sender().setStyleSheet("background-color: red")
            self.sender().setText('Log pose ON')            
            bag_name = bag_dir+'/'+time.strftime('%Y-%m-%d-%H-%M-%S')+'_'+mission_name+'_poses.bag'
            bag = rosbag.Bag(bag_name, 'w')
            bag_record = True            
            logger.info("Start pose Log on file %s" % bag_name)
        else:
            self.sender().setStyleSheet("background-color: lightgrey")
            self.sender().setText('Log pose OFF')
            bag_record = False
            bag.close()
            logger.info("Stop pose Log")
    """

    def send_alea(self, agent, alea, parameter):
        # rosservice to send alea to agent
        logger.info('Send alea : [%s , %s]' % (alea, parameter))
        serviceProxy = rospy.ServiceProxy('/'+agent+'/alea', AleaAction)
        resp = serviceProxy(alea, parameter)
        if resp.success:
            logger.info('[%s] alea service ACK ' % agent)
        else:
            logger.warning('[%s] alea service NOT ACK ' % agent)

    def cb_kill_robot(self):
        killed_agent = self.ui.killedRobotBox.currentText()
        informed_agent = self.ui.warnedKilledRobotBox.currentText()
        logger.info('Kill {0} and inform {1}'.format(killed_agent, informed_agent))
        self.send_alea(killed_agent, 'robotDead', '{"robot":"'+killed_agent+'"}')
        self.send_alea(informed_agent, 'robotDead', '{"robot":"'+killed_agent+'"}')

    def cb_vnet_isolate(self):
        robot = self.ui.vnetRobotBox.currentText()
        logger.info('Isolating {0}'.format(robot))
        self.vnet_add.publish("""{"src":"%s", "tgt":"*", "filter":"block", "bidir":true}"""%(robot))
        self.ui.vnetInfoLabel.setText(self.ui.vnetInfoLabel.text() + "\nIsolate %s" % robot)

    def cb_vnet_range(self):
        try:
            r = float(self.ui.vnetRangeField.text())
        except ValueError:
            logger.error("Cannot convert %s to float" % self.ui.vnetRangeField.text())
            return
        logger.info('Com range limited to {}m'.format(r))
        self.vnet_add.publish("""{"src":"*", "tgt":"*", "filter":"pose", "bidir":true, "range":%f}"""%(r))
        self.ui.vnetInfoLabel.setText(self.ui.vnetInfoLabel.text() + "\nRange : %s" % r)
        
    def cb_vnet_isolate_all(self):
        logger.info("Cutting all communications")
        self.vnet_add.publish("""{"src":"*", "tgt":"*", "filter":"block", "bidir":true}""")
        self.ui.vnetInfoLabel.setText("Everything blocked")
        
    def cb_vnet_reset(self):
        logger.info("Allowing all communications")
        self.vnet_del.publish("""{"src":"*", "tgt":"*", "index":"*"}""")
        self.ui.vnetInfoLabel.setText("")
        
    def cb_target_send(self):
        robot = self.ui.targetRobotBox.currentText()
        x = self.ui.targetXField.text()
        if not x:
            x = "236"
        y = self.ui.targetYField.text()
        if not y:
            y = "-9"
        logger.info('Robot {0} will see the target at ({1},{2})'.format(robot,x,y))
        self.send_alea(robot, 'targetFound', """{"target":{"x":%f,"y":%f}}""" % (float(x),float(y)))
    
    def cb_target_end(self):
        robot = self.ui.targetEndBox.currentText()
        logger.info('Robot {0} will end tracking'.format(robot))
        self.send_alea(robot, 'state', """{"state":"running"}""")
        
    def cb_target_track(self):
        robot = self.ui.targetTrackBox.currentText()
        logger.info('Robot {0} will start tracking'.format(robot))
        self.send_alea(robot, 'state', """{"state":"tracking"}""")
    
    def cb_target_repair(self):
        robot = self.ui.targetRepairBox.currentText()
        logger.info('Robot {0} will carry on with the plan'.format(robot))
        self.send_alea(robot, 'state', """{"state":"repairingactive"}""")
    
    def cb_debug_state(self):
        robot = self.ui.debugRobotBox.currentText()
        state = self.ui.debugStateBox.currentText()
        logger.info('Robot {0} will got to state {1}'.format(robot,state))
        self.send_alea(robot, 'state', """{"state":"%s"}""" % state)
    
    def cb_debug_stn_update(self):
        robot = self.ui.debugRobotBox.currentText()
        logger.info('Robot {0} will send a MaSTN update'.format(robot))
        self.send_alea(robot, 'sendMastn', '{}')
        
    def cb_debug_stn_update_general(self):
        for robot in self.robots:
            logger.info('Robot {0} will send a MaSTN update'.format(robot))
            self.send_alea(robot, 'sendMastn', '{}')

    def cb_debug_repair(self):
        robot = self.ui.debugRobotBox.currentText()
        logger.info('Robot {0} will repair'.format(robot))
        self.send_alea(robot, 'repair', '{}')

    def resetTargetBoxes(self):
        self.ui.targetEndBox.clear()
        self.ui.targetTrackBox.clear()
        self.ui.targetRepairBox.clear()
        
        if self.trackConfRobots:
            #There are robots waiting
            for r in self.trackConfRobots:
                self.ui.targetTrackBox.addItem(r)
                self.ui.targetRepairBox.addItem(r)

            self.ui.targetRepairBox.setCurrentIndex(0)
            self.ui.targetRepairBox.setCurrentIndex(0)

            self.ui.targetTrackButton.setEnabled(True)
            self.ui.targetRepairButton.setEnabled(True)
        else:
            self.ui.targetTrackButton.setEnabled(False)
            self.ui.targetRepairButton.setEnabled(False)
            
        if self.trackRobots:
            for r in self.trackRobots:
                self.ui.targetEndBox.addItem(r)
            
            self.ui.targetEndBox.setCurrentIndex(0)
            self.ui.targetEndButton.setEnabled(True)
        else:
            self.ui.targetEndButton.setEnabled(False)

    def cb_ros_state(self, data):
        robot = data.agent
        state = data.state
        
        if state == "TRACKINGCONFIRMATION":
            if robot not in self.trackConfRobots:
                self.trackConfRobots.add(robot)
                self.resetTargetBoxes()
        else:
            if robot in self.trackConfRobots:
                self.trackConfRobots.remove(robot)
                self.resetTargetBoxes()
                
        if state == "TRACKING":
            if robot not in self.trackRobots:
                self.trackRobots.add(robot)
                self.resetTargetBoxes()
        else:
            if robot in self.trackRobots:
                self.trackRobots.remove(robot)
                self.resetTargetBoxes()

        traj = []
        for m in data.actions:
            if not m.executed:
                l = m.name.split(" ")
                if l[0] == "move":
                    x1 = float(l[2].split("_")[1])/100
                    y1 = float(l[2].split("_")[2])/100
                    x2 = float(l[3].split("_")[1])/100
                    y2 = float(l[3].split("_")[2])/100

                    traj.append({"start":{"x":x1,"y":y1}, "end":{"x":x2,"y":y2}})

        self.ui.mapViewer.set_trajectory(robot, traj)
    
    def closeEvent(self, event):
        rospy.signal_shutdown("Window closed")
        event.accept() # let the window close

def main():

    global mission_name, bag_dir
    
    if len(sys.argv) < 2:
        print("usage: {0} mission_filename.json".format(sys.argv[0]))
        sys.exit()

    print("Read mission file"+sys.argv[0])
    mission = json.load(open(sys.argv[1]))
    mission_name = sys.argv[1].split('/')[-1].split('.')[0]
    print('Mission name = ' + mission_name)

    bag_dir = os.environ['HOME']

    # Get hom_dir and check env variable to build path
    home_dir = ''
    for s in mission["home_dir"].split('/'):
        if s[0]=='$' :
            home_dir += os.environ[s[1:]]+'/'
            bag_dir = os.environ[s[1:]]
        else:
            home_dir += s+'/' 

    # Get map info
    print(home_dir)            
    print("Map  = "+mission["map_data"]["image_file"])
    map_size = mission["map_data"]["map_size"]    
    x_0 = float(map_size['x_min'])
    y_0 = float(map_size['y_max'])
    dx = float(map_size['x_max'])-float(map_size['x_min'])
    dy = float(map_size['y_max'])-float(map_size['y_min'])

    # Read image data
    image = QtGui.QImage(home_dir+mission["map_data"]["image_file"])
    if image.isNull():
        print("Error image not found")
        sys.exit()

    robots = mission['agents']
    targets = mission.get('targets', {})
    
    app = QtGui.QApplication(sys.argv)
    w = MainWindow(image, x_0, y_0, dx, dy, robots, targets)
    
    # Start ros node
    rospy.init_node('ISMAC', anonymous=True)
    
    # Let the python interpreter run each 500 ms.
    timer = QTimer()
    timer.start(500)
    timer.timeout.connect(lambda: None)

    #Exit when a SIGINT is received
    def sigint_handler(*args):
        rospy.signal_shutdown("User signal")
        QtGui.QApplication.quit()
    signal.signal(signal.SIGINT, sigint_handler)

    sys.exit(app.exec_())

    
if __name__ == '__main__':
    main()
