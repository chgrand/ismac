#!/usr/bin/env python

from Ui_MainWindow import Ui_MainWindow

import rospy
import rosbag
from std_msgs.msg import Empty,String
from geometry_msgs.msg import PoseStamped
from metal.srv import AleaAction
import os, sys
import json
from PySide import QtGui
from PySide.QtCore import QTimer
from map_viewer import MapViewer
import time
import logging
import signal

## Global properties

logger = logging.getLogger("ismac")
ch = logging.StreamHandler()
logger.addHandler(ch)
cf = logging.Formatter('[%(asctime)s][%(levelname)s] (%(name)s): %(message)s')
ch.setFormatter(cf)
logger.setLevel(logging.INFO)
logger.info("ismac started")

bag_record = False
bag = None

#------------------------------------------------------------------------------
class Agent:
    def __init__(self, name, color):
        self.name = name
        self.x = 0
        self.y = 0
        self.color = color    
        rospy.Subscriber("/"+name+"/pose", PoseStamped, self.callback)

    def set_gui(self, gui):
        self.gui = gui
            
    def callback(self, data):
        global bag_record, bag
        
        if bag_record:
            bag.write('/'+self.name+'/pose', data)
        self.x = data.pose.position.x
        self.y = data.pose.position.y
        try:
            self.gui.update()    
        except:
            None
        
    
    def get_pos(self):
        return (self.x, self.y)

    def get_name(self):
        return self.name

    def getColor(self):
        return self.color

#------------------------------------------------------------------------------
class MainWindow(QtGui.QMainWindow):

    def __init__(self, image, x_0, y_0, dx, dy, robots, targets):
        super(MainWindow, self).__init__()
        self.ui=Ui_MainWindow()
        self.hidden_start_pub = rospy.Publisher('/hidden/start', Empty, queue_size = 1)
        self.vnet_add = rospy.Publisher('/vnet/add', String, queue_size = 1)
        self.vnet_del = rospy.Publisher('/vnet/del', String, queue_size = 1)
        self.ui.setupUi(self)
        self.ui.mapViewer.init(image, x_0, y_0, dx, dy)
                
        for cbox in [self.ui.killedRobotBox, self.ui.warnedKilledRobotBox, self.ui.vnetRobotBox, self.ui.targetRobotBox, self.ui.debugRobotBox]:
            for r in robots.keys():
                cbox.addItem(r)
                
        for agent,props in robots.items():
            print('Add robot: '+agent+"\t"+props['color'])
            self.ui.mapViewer.add_agent(Agent(agent, props['color']))
        for agent,props in targets.items():
            print('Add target: '+agent+"\t"+props['color'])
            self.ui.mapViewer.add_agent(Agent(agent, props['color']))
   
        self.ui.debugStateBox.addItem("running")
        self.ui.debugStateBox.addItem("error")

        self.ui.transparencySlider.valueChanged.connect(self.ui.mapViewer.set_opacity)
        
        self.ui.startButton.clicked.connect(self.cb_start_mission)
        self.ui.logPosButton.clicked.connect(self.cb_log_poses)
        
        self.ui.killButton.clicked.connect(self.cb_kill_robot)
        self.ui.vnetIsolateButton.clicked.connect(self.cb_vnet_isolate)
        self.ui.vnetBlockButton.clicked.connect(self.cb_vnet_isolate_all)
        self.ui.vnetResetButton.clicked.connect(self.cb_vnet_reset)
        self.ui.targetSendButton.clicked.connect(self.cb_target_send)
        self.ui.debugStateSend.clicked.connect(self.cb_debug_state)
        self.ui.debugSendUpdateButton.clicked.connect(self.cb_debug_stn_update)
        self.ui.debugRepairButton.clicked.connect(self.cb_debug_repair)
        
        self.show()

    def cb_start_mission(self):
        self.hidden_start_pub.publish(Empty())
        logger.info("Start mission")

    def cb_log_poses(self):
        global bag, bag_record, mission_name
        if self.sender().isChecked():
            self.sender().setStyleSheet("background-color: red")
            self.sender().setText('Log pose ON')            
            bag_name = bag_dir+'/'+time.strftime('%Y-%m-%d-%H-%M-%S')+'_'+mission_name+'_poses.bag'
            bag = rosbag.Bag(bag_name, 'w')
            bag_record = True            
            logger.info("Start pose Log on file %s" % bag_name)
        else:
            self.sender().setStyleSheet("background-color: lightgrey")
            self.sender().setText('Log pose OFF')
            bag_record = False
            bag.close()
            logger.info("Stop pose Log")

    def send_alea(self, agent, alea, parameter):
        # rosservice to send alea to agent
        logger.info('Send alea : [%s , %s]' % (alea, parameter))
        serviceProxy = rospy.ServiceProxy('/'+agent+'/alea', AleaAction)
        resp = serviceProxy(alea, parameter)
        if resp.success:
            logger.info('[%s] alea service ACK ' % agent)
        else:
            logger.warning('[%s] alea service NOT ACK ' % agent)

    def cb_kill_robot(self):
        killed_agent = self.ui.killedRobotBox.currentText()
        informed_agent = self.ui.warnedKilledRobotBox.currentText()
        logger.info('Kill {0} and inform {1}'.format(killed_agent, informed_agent))
        self.send_alea(killed_agent, 'robotDead', '{"robot":"'+killed_agent+'"}')
        self.send_alea(informed_agent, 'robotDead', '{"robot":"'+killed_agent+'"}')

    def cb_vnet_isolate(self):
        robot = self.ui.vnetRobotBox.currentText()
        logger.info('Isolating {0}'.format(robot))
        self.vnet_add.publish("""{"src":"%s", "tgt":"*", "filter":"block", "bidir":true}"""%(robot))
        self.ui.vnetInfoLabel.setText(self.ui.vnetInfoLabel.text() + "\nIsolate %s" % robot)

    def cb_vnet_isolate_all(self):
        logger.info("Cutting all communications")
        self.vnet_add.publish("""{"src":"*", "tgt":"*", "filter":"block", "bidir":true}""")
        self.ui.vnetInfoLabel.setText("Everything blocked")
        
    def cb_vnet_reset(self):
        logger.info("Allowing all communications")
        self.vnet_del.publish("""{"src":"*", "tgt":"*", "filter":"block", "bidir":true}""")
        self.ui.vnetInfoLabel.setText("")
        
    def cb_target_send(self):
        robot = self.ui.targetRobotBox.currentText()
        x = self.ui.targetXField.text()
        if not x:
            x = "236"
        y = self.ui.targetYField.text()
        if not y:
            y = "-9"
        logger.info('Robot {0} will see the target at ({1},{2})'.format(robot,x,y))
        self.send_alea(robot, 'targetFound', """{"position":{"x":%f,"y":%f}""" % (float(x),float(y)))
    
    def cb_debug_state(self):
        robot = self.ui.debugRobotBox.currentText()
        state = self.ui.debugStateBox.currentText()
        logger.info('Robot {0} will got to state {1}'.format(robot,state))
        self.send_alea(robot, 'state', """{"state":"%s"}""" % state)
    
    def cb_debug_stn_update(self):
        robot = self.ui.debugRobotBox.currentText()
        logger.info('Robot {0} will send a MaSTN update'.format(robot))
        self.send_alea(robot, 'sendMastn', '{}')

    def cb_debug_repair(self):
        robot = self.ui.debugRobotBox.currentText()
        logger.info('Robot {0} will repair'.format(robot))
        self.send_alea(robot, 'repair', '{}')
        
def main():

    global mission_name, bag_dir
    
    if len(sys.argv) < 2:
        print("usage: {0} mission_filename.json".format(sys.argv[0]))
        sys.exit()

    print("Read mission file"+sys.argv[0])
    mission = json.load(open(sys.argv[1]))
    mission_name = sys.argv[1].split('/')[-1].split('.')[0]
    print('Mission name = ' + mission_name)

    bag_dir = os.environ['HOME']

    # Get hom_dir and check env variable to build path
    home_dir = ''
    for s in mission["home_dir"].split('/'):
        if s[0]=='$' :
            home_dir += os.environ[s[1:]]+'/'
            bag_dir = os.environ[s[1:]]
        else:
            home_dir += s+'/' 

    # Get map info
    print(home_dir)            
    print("Map  = "+mission["map_data"]["image_file"])
    map_size = mission["map_data"]["map_size"]    
    x_0 = float(map_size['x_min'])
    y_0 = float(map_size['y_max'])
    dx = float(map_size['x_max'])-float(map_size['x_min'])
    dy = float(map_size['y_max'])-float(map_size['y_min'])

    # Read image data
    image = QtGui.QImage(home_dir+mission["map_data"]["image_file"])
    if image.isNull():
        print("Error image not found")
        sys.exit()

    robots = mission['agents']
    targets = mission.get('targets', {})
    
    app = QtGui.QApplication(sys.argv)
    w = MainWindow(image, x_0, y_0, dx, dy, robots, targets)
    
    # Start ros node
    rospy.init_node('ISMAC')#, anonymous=True)
    
    # Let the python interpreter run each 500 ms.
    timer = QTimer()
    timer.start(500)
    timer.timeout.connect(lambda: None)  

    #Exit when a SIGINT is received
    def sigint_handler(*args):
        QtGui.QApplication.quit()
    signal.signal(signal.SIGINT, sigint_handler)
        
    sys.exit(app.exec_())

    
if __name__ == '__main__':
    main()
