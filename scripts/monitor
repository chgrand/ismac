#!/usr/bin/env python

import rospy
import rosbag
from std_msgs.msg import Empty
#from sensor_msgs.msg import NavSatFix
from geometry_msgs.msg import PoseStamped
from metal.srv import AleaAction

import os, sys
import subprocess #, signal
import json
from PySide import QtGui
from map_viewer import MapViewer
import time

bag_record = False
bag = None

#------------------------------------------------------------------------------
class Agent:
    def __init__(self, name, color):
        self.name = name
        self.x = 0
        self.y = 0
        self.color = color    
        rospy.Subscriber("/"+name+"/pose", PoseStamped, self.callback)

    def set_gui(self, gui):
        self.gui = gui
            
    def callback(self, data):
        global bag_record, bag
        
        if bag_record:
            bag.write('/'+self.name+'/pose', data)
        self.x = data.pose.position.x
        self.y = data.pose.position.y
        try:
            self.gui.update()    
        except:
            None
        
    
    def get_pos(self):
        return (self.x, self.y)

    def get_name(self):
        return self.name

    def getColor(self):
        return self.color


#------------------------------------------------------------------------------
class MainWin(QtGui.QWidget):

    def __init__(self, map_viewer_):
        super(MainWin, self).__init__()
        self.hidden_start_pub = rospy.Publisher('/hidden/start', Empty, queue_size = 1)
        self.aleaProxy =dict()
        self.create_ui(map_viewer_)
        
    def cb_start_mission(self):
        self.hidden_start_pub.publish(Empty())
        rospy.loginfo("Start mission")
        
    def cb_log_poses(self):
        global bag, bag_record, mission_name
        if self.sender().isChecked():
            self.sender().setStyleSheet("background-color: red")
            self.sender().setText('Log pose ON')            
            bag_name = time.strftime('%Y-%m-%d-%H-%M-%S')+'_'+mission_name+'_poses.bag'
            bag = rosbag.Bag(bag_name, 'w')
            bag_record = True            
            rospy.loginfo("Start pose Log")
        else:
            self.sender().setStyleSheet("background-color: lightgrey")
            self.sender().setText('Log pose OFF')
            bag_record = False
            bag.close()
            rospy.loginfo("Stop pose Log")

    def cb_kill_robot(self):
        killed = self.comboBoxKilled.currentText()
        informed = self.comboBoxInformed.currentText()
        rospy.loginfo('Kill {0} and inform {1}'.format(killed, informed))
        data = '!!str "{\"robot\":\"'+killed+'\"}"'
        self.aleaProxy[killed]('robotDead', data)
        self.aleaProxy[informed]('robotDead', data)

    def add_agent(self, name):
        self.comboBoxKilled.addItem(name)
        self.comboBoxInformed.addItem(name)
        self.aleaProxy[name] = rospy.ServiceProxy('/'+name+'/alea', AleaAction)

        
    def create_ui(self, map_viewer_):
        vbox = QtGui.QVBoxLayout()
        btn = QtGui.QPushButton("Start mission")
        btn.setMinimumHeight(40)
        btn.clicked.connect(self.cb_start_mission)
        vbox.addWidget(btn)
        
        btn = QtGui.QPushButton("Log poses OFF")
        btn.setMinimumHeight(40)
        btn.setCheckable(True)
        btn.toggled.connect(self.cb_log_poses)
        vbox.addWidget(btn)
        vbox.addSpacing(32)

        vbox.addWidget(QtGui.QLabel('Killed robot:'))
        self.comboBoxKilled = QtGui.QComboBox()
        vbox.addWidget(self.comboBoxKilled)
        vbox.addWidget(QtGui.QLabel('Informed robot:'))
        self.comboBoxInformed = QtGui.QComboBox()
        vbox.addWidget(self.comboBoxInformed)                
        vbox.addSpacing(12)
        
        btn = QtGui.QPushButton("Kill !!!")
        btn.setMinimumHeight(40)
        btn.clicked.connect(self.cb_kill_robot)
        vbox.addWidget(btn)
        vbox.addStretch(1)
        
        group = QtGui.QGroupBox()
        group.setFixedWidth(180)
        group.setLayout(vbox)


        
        hbox = QtGui.QHBoxLayout()
        hbox.addWidget(map_viewer_)
        hbox.addWidget(group)

        self.setLayout(hbox)
        self.setGeometry(200, 200, 500, 400) #int(y_size*500/x_size))
        self.setWindowTitle('ISMAC')
        self.show()


#------------------------------------------------------------------------------
def main():
    global mission_name
    
    if len(sys.argv) < 2:
        print("usage: {0} mission_filename.json".format(sys.argv[0]))
        sys.exit()

    print("Read mission file"+sys.argv[0])
    mission = json.load(open(sys.argv[1]))
    mission_name = sys.argv[1].split('/')[-1].split('.')[0]
    print('Mission name = ' + mission_name)


    # Get hom_dir and check env variable to build path
    home_dir = ''
    for s in mission["home_dir"].split('/'):
        if s[0]=='$' :            
            home_dir += os.environ[s[1:]]+'/'
        else:
            home_dir += s+'/' 

    # Get map info
    print(home_dir)            
    print("Map  = "+mission["map_data"]["image_file"])
    map_size = mission["map_data"]["map_size"]    
    x_0 = float(map_size['x_min'])
    y_0 = float(map_size['y_max'])
    dx = float(map_size['x_max'])-float(map_size['x_min'])
    dy = float(map_size['y_max'])-float(map_size['y_min'])

    # Read image data
    image = QtGui.QImage(home_dir+mission["map_data"]["image_file"])
    if image.isNull():
        print("Error image not found")
        sys.exit()


        

        
    # Start application and widgets
    app = QtGui.QApplication(sys.argv)
    map_viewer = MapViewer(image, x_0, y_0, dx, dy)
    main_window = MainWin(map_viewer)

    
    # Start ros node
    rospy.init_node('ISMAC', anonymous=True)

    ## Analyse and add list of agents
    agents_list = mission['agents']
    for agent, props in agents_list.iteritems():        
        print('Add agent: '+agent+"\t"+props['color'])
        map_viewer.add_agent(Agent(agent, agents_list[agent]['color']))
        main_window.add_agent(agent)
    app.exec_()
    
if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass

