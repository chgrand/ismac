#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import rospy
from geometry_msgs.msg import PoseStamped
import sys, os, time
import yarp

### Global option

verbose = True #False

###

rospy.init_node('ressac_pose_conv')


# Yarp config
yarpNetwork = yarp.Network()

if not yarpNetwork.checkNetwork():
    rospy.logerr("Connection to yarp failed")
    rospy.logerr("Ressac Yarp-ROS conversion is not activated")
    rospy.signal_shutdown("YARP server unreachable")

ressac_1_pos_in_port=yarp.BufferedPortBottle()
ressac_1_pos_in_port.open("/morse/ressac/26/teleport/in")
#yarp.Network.connect("/morse/ressac/23/teleport/in", "/monitor/ressac_1/pose/in")

ressac_2_pos_in_port=yarp.BufferedPortBottle()
ressac_2_pos_in_port.open("/morse/ressac/23/teleport/in")
#yarp.Network.connect("/morse/ressac/26/teleport/in", "/monitor/ressac_2/pose/in")

target_pos_in = yarp.BufferedPortBottle()
target_pos_in.open('/ros/target/state')
yarp.Network.connect('/target/state', '/ros/target/state')


# ROS config
ressac_1_pub = rospy.Publisher("/ressac1/pose", PoseStamped, queue_size = 1)
ressac_2_pub = rospy.Publisher("/ressac2/pose", PoseStamped, queue_size = 1)
target_pub   = rospy.Publisher("/target/pose", PoseStamped, queue_size = 1)
ressac_1_pose = PoseStamped()
ressac_2_pose = PoseStamped()
target_pose   = PoseStamped()


while not rospy.is_shutdown():
    time.sleep(.2)
    btl = ressac_1_pos_in_port.read(False)
    if btl!=None:
        #sim_time  = btl.get(0).asDouble()
        x_pos = btl.get(0).asDouble()
        y_pos = btl.get(1).asDouble()
        z_pos = btl.get(2).asDouble()
        ressac_1_pose.pose.position.x = y_pos
        ressac_1_pose.pose.position.y = x_pos
        ressac_1_pose.pose.position.z = -z_pos
        ressac_1_pub.publish(ressac_1_pose)
        if verbose:
            print("ressac_1 : ({0:.2f}, {1:.2f})".format(y_pos, x_pos))
        
    btl = ressac_2_pos_in_port.read(False)
    if btl!=None:
        x_pos = btl.get(0).asDouble()
        y_pos = btl.get(1).asDouble()
        z_pos = btl.get(2).asDouble()
        ressac_2_pose.pose.position.x = y_pos
        ressac_2_pose.pose.position.y = x_pos
        ressac_2_pose.pose.position.z = -z_pos
        ressac_2_pub.publish(ressac_2_pose)
        if verbose:
            print("ressac_2 : ({0:.2f}, {1:.2f})".format(y_pos, x_pos))
            
    btl = target_pos_in.read(False)
    if btl!=None:
        x_pos = btl.get(0).asDouble()
        y_pos = btl.get(1).asDouble()
        z_pos = btl.get(2).asDouble()
        target_pose.pose.position.x = y_pos
        target_pose.pose.position.y = x_pos
        target_pose.pose.position.z = -z_pos
        target_pub.publish(target_pose)
        if verbose:
            print("target : ({0:.2f}, {1:.2f})".format(y_pos, x_pos))
            
